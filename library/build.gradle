import org.jetbrains.kotlin.gradle.tasks.KaptGenerateStubs

plugins {
  id 'com.android.library'
  id 'kotlin-android'
  id 'kotlin-kapt'
  id 'maven-publish'
}

android {
  namespace 'com.nextstory'
  compileSdk rootProject.compileSdk

  defaultConfig {
    minSdk rootProject.minSdk
    targetSdk rootProject.targetSdk
    testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
  }

  buildTypes {
    debug {
      minifyEnabled false
    }
    release {
      minifyEnabled false
      rootProject.proguardFiles.collect { consumerProguardFile it }
    }
  }

  buildFeatures {
    dataBinding true
  }

  compileOptions {
    coreLibraryDesugaringEnabled true
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }

  kotlinOptions {
    jvmTarget = JavaVersion.VERSION_1_8.toString()
  }
}

tasks.withType(KaptGenerateStubs).configureEach {
  // noinspection GrDeprecatedAPIUsage
  kotlinOptions {
    jvmTarget = JavaVersion.VERSION_1_8.toString()
  }
}

dependencies {
  coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:2.0.4'

  testImplementation 'junit:junit:4.13.2'
  androidTestImplementation 'androidx.test.ext:junit:1.1.5'
  androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'

  implementation fileTree(include: ['*.aar', '*.jar'], dir: 'libs')
  implementation platform("org.jetbrains.kotlin:kotlin-bom:$kotlinVersion")
  implementation 'org.jetbrains.kotlin:kotlin-reflect'

  api 'androidx.appcompat:appcompat:1.6.1'
  api 'androidx.core:core-ktx:1.12.0'
  api 'androidx.constraintlayout:constraintlayout:2.1.4'
  api 'androidx.recyclerview:recyclerview:1.3.2'

  api 'com.google.code.gson:gson:2.10.1'
  api 'com.github.ome450901:SimpleRatingBar:1.5.1'
  api 'com.github.esafirm:android-image-picker:3.0.0'
  api 'com.vanniktech:android-image-cropper:4.5.0'
  api 'de.hdodenhof:circleimageview:3.1.0'

  api('com.wdullaer:materialdatetimepicker:4.2.3') {
    exclude group: 'androidx.appcompat'
    exclude group: 'androidx.recyclerview'
  }
}

publishing {
  tasks.register('sourceJar', Jar) {
    from android.sourceSets.main.java.srcDirs
    archiveClassifier.set('sources')
  }

  repositories {
    maven {
      url "$rootDir/repository"
    }
  }

  android.libraryVariants.configureEach { variant ->
    if (variant.buildType.name != 'debug') {
      // noinspection ForeignDelegate
      publications {
        "${rootProject.groupId}"(MavenPublication) {
          artifact sourceJar
          artifact(variant.packageLibraryProvider.get().archiveFile) {
            builtBy variant.assembleProvider
          }

          groupId rootProject.groupId
          artifactId 'library'
          version rootProject.libraryVersion

          pom.withXml {
            // noinspection GroovyImplicitNullArgumentCall
            def dependenciesNode = asNode().appendNode('dependencies')

            // 'api'가 포함된 라이브러리 포함
            // NOTE: databinding, Library 그룹은 제외함
            configurations.api.allDependencies.each {
              if (!it.group.contains('androidx.databinding') && !it.group.contains('Library')) {
                def dependencyNode = dependenciesNode.appendNode('dependency')
                dependencyNode.appendNode('groupId', it.group)
                dependencyNode.appendNode('artifactId', it.name)
                dependencyNode.appendNode('version', it.version)
              }
            }
          }
        }
      }
    }
  }
}
